#
# Copyright 2017 Matthijs Bos <matthijs_vlaarbos@hotmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

lappend auto_path .

package require Tcl 8.5
package require tcltest 2.3.8
package require fpgaedu::jsonrpc 1.0
package require fpgaedu::assert 1.0

namespace import ::tcltest::*
namespace import ::fpgaedu::assert::*

test "findHandlerTest1" "" \
        -body {
            set mapping [list test someHandlerMethod]
            set handler [::fpgaedu::jsonrpc::findHandler $mapping test] 
            assertEquals $handler someHandlerMethod
        }

test "findHandlerTest2" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::findHandler {} test
            } errorResult

            assertDictContains $errorResult code -32601
        } 

test "throwTest1" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::throw 12345 "some error message"
            } errorResult

            assertDictContains $errorResult code 12345
            assertDictContains $errorResult message "some error message"
        } 

test "throwParseErrorTest1" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::throwParseError "Parse error."
            } errorResult

            assertDictContains $errorResult code -32700
            assertDictContains $errorResult message "Parse error."
        } 

test "throwInvalidRequestTest1" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::throwInvalidRequest "Invalid request."
            } errorResult

            assertDictContains $errorResult code -32600
            assertDictContains $errorResult message "Invalid request."
        }

test "throwUnknownMethodTest1" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::throwUnknownMethod "Unknown method."
            } errorResult

            assertDictContains $errorResult code -32601
            assertDictContains $errorResult message "Unknown method."
        }

test "throwInvalidParamsTest1" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::throwInvalidParams "Invalid params."
            } errorResult

            assertDictContains $errorResult code -32602
            assertDictContains $errorResult message "Invalid params."
        }

test "throwInternalErrorTest1" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::throwInternalError "Internal error."
            } errorResult

            assertDictContains $errorResult code -32603
            assertDictContains $errorResult message "Internal error."
        }

# test "validateRequestTest1" "" \
#         -body {
#             set requestData {jsonrpc 2.0 method test}
#             set requestSchema {jsonrpc string method string}
#             set valid [::fpgaedu::jsonrpc::validateRequest $requestData $requestSchema]
#             assertEquals $valid 1
#         }
# test "validateRequestTest2" "" \
#         -body {
#             set requestData { jsonrpc 2.0 method test }
#             set requestSchema { jsonrpc number method string }
#             assertError {
#                 ::fpgaedu::jsonrpc::validateRequest $requestData $requestSchema
#             }
#         } \
#         -result { code -32600 message {Illegal type for member jsonrpc} } \
#         -match dictContainsResult

# test "handleTest1" "" \
#         -body {
#             proc testHandler {params} {
#                 return "hello"
#             }
#             set request {{"jsonrpc": "2.0", "method": "test", "params": [42, 23], "id": 1}}
#             set mapping {test testHandler}
#             return [::fpgaedu::jsonrpc::handle $mapping $request]
#         }


cleanupTests    