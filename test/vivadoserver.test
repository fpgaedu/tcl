#
# Copyright 2017 Matthijs Bos <matthijs_vlaarbos@hotmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

lappend auto_path .
lappend auto_path ..

package require Tcl 8.5
package require tcltest 2.3.5
package require base64 2.4

package require fpgaedu::json 2.0
package require fpgaedu::test::assert 1.0
package require fpgaedu::test::constraint 1.0
# Load the fpgaedu::vivadoserver package conditionally, in order to prevent 
# crash in the case of this test script being executed outside the Vivado Tcl
# interpreter, such as tclsh.
if {[::tcltest::testConstraint vivado]} {
    package require fpgaedu::vivadoserver 1.0
}

namespace import ::tcltest::*
namespace import ::fpgaedu::json::json
namespace import ::fpgaedu::test::assert::*

# Setup some nexys4-specific test variables. Since the acquisition of this 
# information takes relatively long, these steps are not repeated in every
# test setup.
if {[testConstraint nexys4]} {
    # Get nexys4 target and device identifiers
    open_hw
    current_hw_server [connect_hw_server]
    current_hw_target [lindex [get_hw_targets] 0]
    open_hw_target
    current_hw_device [lindex [get_hw_devices] 0]
    set nexys4TargetIdentifier [get_property NAME [current_hw_target]]
    set nexys4DeviceIdentifier [get_property NAME [current_hw_device]]
    close_hw_target
    disconnect_hw_server
    close_hw            
    # Get bitstream data in binary and base64 format
    set nexys4BitstreamPath [file join resources nexys4.bit]
    set nexys4BitstreamChan [open $nexys4BitstreamPath r]
    chan configure $nexys4BitstreamChan -encoding binary -translation binary
    set nexys4BitstreamData [chan read $nexys4BitstreamChan]
    set nexys4BitstreamBase64 [base64::encode $nexys4BitstreamData]
    # Clean up file handles and variables
    chan close $nexys4BitstreamChan
    unset nexys4BitstreamPath
    unset nexys4BitstreamChan
}

test "testRpcGetTargetIdentifiersHandler" "" \
        -constraints { nexys4 } \
        -setup {
            set paramsJson [json create null]
        } \
        -body {
            set resultJson [::fpgaedu::vivadoserver::RpcGetTargetIdentifiersHandler $paramsJson]
            assertTrue [json contains $resultJson -type array]
            assertTrue [json contains $resultJson -key 0 -type string -value $nexys4TargetIdentifier]
            assertFalse [json contains $resultJson -key 1]
        } \
        -cleanup {
            unset paramsJson
            unset resultJson
        }

test "testRpcGetDeviceIdentifiersHandler" "" \
        -constraints { nexys4 } \
        -setup {
            set paramsJson [json create object]
            json set paramsJson targetIdentifier string $nexys4TargetIdentifier
        } \
        -body {
            set resultJson [::fpgaedu::vivadoserver::RpcGetDeviceIdentifiersHandler $paramsJson]
            assertTrue [json contains $resultJson -type array]
            assertTrue [json contains $resultJson -key 0 -type string -value $nexys4DeviceIdentifier]
            assertFalse [json contains $resultJson -key 1]
        } \
        -cleanup {
            unset paramsJson
            unset resultJson
        }

test "testRpcProgramHandler1" "" \
        -constraints { nexys4 } \
        -setup {
            set paramsJson [json create object]
            json set paramsJson device string $nexys4DeviceIdentifier
            json set paramsJson target string $nexys4TargetIdentifier
            json set paramsJson bitstream string $nexys4BitstreamBase64
        } \
        -body {
            set resultJson [::fpgaedu::vivadoserver::RpcProgramHandler $paramsJson]
            assertTrue [json contains -type null]
        } \
        -cleanup {
            unset paramsJson
            unset resultJson
        }

test "testRpcEchoHandler1" "" \
        -constraints { vivado } \
        -setup {
            set paramsJson [json create object]
            json set paramsJson hello string world
        } \
        -body {
            set resultJson [::fpgaedu::vivadoserver::RpcEchoHandler $paramsJson]
            assertTrue [json contains -key hello -type string -value world]
        } \
        -cleanup {
            unset paramsJson
            unset resultJson
        }

test "testRpcExitHandler1" "" \
        -constraints { vivado } \
        -setup {
            set paramsJson [json create null]
        } \
        -body {
            assertTrue $::fpgaedu::vivadoserver::listening
            set resultJson [::fpgaedu::vivadoserver::RpcExitHandler $paramsJson]
            assertFalse $::fpgaedu::vivadoserver::listening
        } \
        -cleanup {
            unset paramsJson
            unset resultJson
        }

cleanupTests