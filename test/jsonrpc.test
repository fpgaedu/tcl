#
# Copyright 2017 Matthijs Bos <matthijs_vlaarbos@hotmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

lappend auto_path ..

package require Tcl 8.5
package require tcltest 2.3.5
package require fpgaedu::json 2.0
package require fpgaedu::jsonrpc 1.0
package require fpgaedu::assert 1.0

namespace import ::tcltest::*
namespace import ::fpgaedu::assert::*
namespace import ::fpgaedu::json::json
namespace import ::fpgaedu::jsonrpc::jsonrpc

test "testFindHandler1" "" \
        -body {
            set rpcConfig {mapping {test someHandlerMethod}}
            set handler [::fpgaedu::jsonrpc::FindHandler $rpcConfig test] 
            assertEquals $handler someHandlerMethod
        } \
        -cleanup {
            unset rpcConfig
            unset handler
        }

test "testFindHandler2" "" \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::FindHandler {} test
            } errorResult
            assertDictContains $errorResult code -32601
        } \
        -cleanup {
            unset errorResult
        }

test "testMap1" "" \
        -setup {
            jsonrpc map rpcConfig test1 testProcedure1
            jsonrpc map rpcConfig test2 testProcedure2
        } \
        -body {
            assertDictContains $rpcConfig mapping test1 testProcedure1
            assertDictContains $rpcConfig mapping test2 testProcedure2
        } \
        -cleanup {
            unset rpcConfig
        }

test "testThrow1" "" \
        -body {
            assertThrows {
                jsonrpc throw -code parseError -message "Parse error."
            } errorResult
            assertDictContains $errorResult code -32700
            assertDictContains $errorResult message "Parse error."
            assertThrows {
                assertDictContainsKey $errorResult dataJson 
            }
        } \
        -cleanup {
            unset errorResult
        }

test "testThrow2" "" \
        -setup {
            set errorDataJson [json create object]
            json set errorDataJson details string "error details"
        } \
        -body {
            assertThrows {
                jsonrpc throw \
                        -code parseError \
                        -message "Parse error." \
                        -dataJson $errorDataJson
            } errorResult
            assertDictContains $errorResult code -32700
            assertDictContains $errorResult message "Parse error."
            assertTrue [json contains [dict get $errorResult dataJson] \
                    -key details \
                    -type string \
                    -value "error details"]
        } \
        -cleanup {
            unset errorResult
        }

test "testThrow3" "" \
        -body {
            assertThrows {
                jsonrpc throw \
                        -code invalidRequest \
                        -message "Invalid request."
            } errorResult
            assertDictContains $errorResult code -32600
            assertDictContains $errorResult message "Invalid request."
        } -cleanup {
            unset errorResult
        }

test "testThrow4" "" \
        -body {
            assertThrows {
                jsonrpc throw \
                        -code unknownMethod \
                        -message "Unknown method."
            } errorResult
            assertDictContains $errorResult code -32601
            assertDictContains $errorResult message "Unknown method."
        } -cleanup {
            unset errorResult
        }

test "testThrow5" "" \
        -body {
            assertThrows {
                jsonrpc throw \
                        -code invalidParams \
                        -message "Invalid params."
            } errorResult
            assertDictContains $errorResult code -32602
            assertDictContains $errorResult message "Invalid params."
        } -cleanup {
            unset errorResult
        }

test "testThrow6" "" \
        -body {
            assertThrows {
                jsonrpc throw \
                        -code internalError \
                        -message "Internal error."
            } errorResult
            assertDictContains $errorResult code -32603
            assertDictContains $errorResult message "Internal error."
        } -cleanup {
            unset errorResult
        }        

test "testThrow7" "" \
        -body {
            assertThrows {
                jsonrpc throw \
                        -code 1234 \
                        -message "Some message."
            } errorResult
            assertDictContains $errorResult code 1234
            assertDictContains $errorResult message "Some message."
        }

test "validateRequestTest1" "" \
        -setup {
            set testJson [json create object]
            json set testJson jsonrpc string 2.0
            json set testJson method string test 
        } \
        -body {
            assertTrue [::fpgaedu::jsonrpc::ValidateRequest $testJson]
        }

test "validateRequestTest2" "" \
        -setup {
            set testJson [json create object]
            json set testJson jsonrpc number 2.0
            json set testJson method string test
        } \
        -body {
            assertThrows {
                ::fpgaedu::jsonrpc::ValidateRequest $testJson
            } errorResult

            assertDictContains $errorResult code -32600
        } \
        -cleanup {
            unset testJson
            unset errorResult
        }

test "handleTest1" "" \
        -setup {
            proc ::testHandler {params} {
                return [json create string "hello world"]
            }
            set requestData {{"jsonrpc": "2.0", "method": "test"}}
            dict set rpcConfig mapping test ::testHandler
        } \
        -body {
            set responseData [::fpgaedu::jsonrpc::Handle $rpcConfig $requestData]
            set responseJson [json parse $responseData]
            assertTrue [json contains $responseJson \
                    -key result \
                    -type string \
                    -value "hello world"]
        } \
        -cleanup {
            rename testHandler ""
            unset requestData
            unset responseData
            unset responseJson
            unset rpcConfig
        }

cleanupTests    