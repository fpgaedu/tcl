# json.test
# 
#       This file contains a number of unit tests targeted at the procedures
#       defined in fpgaedu::json 2.0 package
#
# Copyright (c) 2014, 2015, 2016 dbohdan
#   Applies to original code from jimhttp library
#
# Copyright (c) 2017 Matthijs Bos <matthijs_vlaarbos@hotmail.com>
#   Applies to modifications to original code
# 
# License: MIT
#
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation  and/or other materials provided with the distribution.
# 3. Neither the names of the copyright holders nor the names of any
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
# 
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGE.

lappend auto_path .
lappend auto_path ..

package require Tcl 8.5
package require tcltest 2.3.5
package require fpgaedu::json 2.0
package require fpgaedu::test::assert 1.0

namespace import ::tcltest::*
namespace import ::fpgaedu::test::assert::*
namespace import ::fpgaedu::json::json

test "testCreateObject" "" \
        -body {
            set result [json create object]

            assertDictContains $result data {}
            assertDictContains $result schema type object
            assertDictContains $result schema members {}
        } \
        -cleanup {
            unset result
        }


test "testCreateArray" "" \
        -body {
            set result [json create array]

            assertDictContains $result data {}
            assertDictContains $result schema type array
            assertDictContains $result schema members {}
        } \
        -cleanup {
            unset result
        }

test "testCreateString" "" \
        -body {
            set result [json create string]
            
            assertDictContains $result data {}
            assertDictContains $result schema type string
            
            set result2 [json create string "hello world"]
            
            assertDictContains $result2 data "hello world"
            assertDictContains $result2 schema type string
        } \
        -cleanup {
            unset result 
            unset result2
        }

test "testCreateNumber" "" \
        -body {
            set result [json create number]

            assertDictContains $result data 0
            assertDictContains $result schema type number

            set result2 [json create number 2]
            
            assertDictContains $result2 data 2
            assertDictContains $result2 schema type number
        } \
        -cleanup {
            unset result 
            unset result2
        }

test "testCreateBoolean" "" \
        -body {
            set result [json create boolean true]

            assertDictContains $result data true
            assertDictContains $result schema type boolean
        } \
        -cleanup {
            unset result 
        }

test "testCreateNull" "" \
        -body {
            set result [json create null]

            assertDictContains $result data null
            assertDictContains $result schema type null
        } \
        -cleanup {
            unset result 
        }

proc getTestJson1 {} {
    return {
        data {
            a "hello world"
            b 1234
            c {
                d True
                e {
                    0 "index 0"
                    1 "index 1"
                    2 {
                        f null
                    }
                }
            }
        }
        schema {
            type object
            members {
                a { type string }
                b { type number }
                c { type object
                    members {
                        d { type boolean }
                        e { type array 
                            members {
                                0 { type string }
                                1 { type string }
                                2 {
                                    type object
                                    members {
                                        f { type null }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

test "testGet1" "" \
        -setup {
            set testJson [getTestJson1]
        } \
        -body {
            assertEquals [::fpgaedu::json::Get $testJson a] "hello world"
            assertEquals [json get $testJson b] 1234
            assertEquals [json get $testJson c.d] True
            assertEquals [json get $testJson c.e.0] "index 0"
            assertEquals [json get $testJson c.e.1] "index 1"
            assertEquals [json get $testJson c.e.2.f] null
        } \
        -cleanup {
            unset testJson
        }

test "testGet2" "" \
        -setup {
            set testJson {
                data {
                    0 {
                        a "hello world"
                        b 999
                        c True
                    }
                    1 null
                }
                schema {
                    type array
                    members {
                        0 {
                            type object
                            members {
                                a { type string }
                                b { type number }
                                c { type boolean }
                            }
                        }
                        1 { type null }
                    }
                }
            }
        } \
        -body {
            assertThrows {
                json get $testJson
            }
            
            assertEquals [json get $testJson -type] array
            assertEquals [json get $testJson 0 -type] object
            assertEquals [json get $testJson 0.a -type] string
            assertEquals [json get $testJson 0.b -type] number
            assertEquals [json get $testJson 0.c -type] boolean
            assertEquals [json get $testJson 1 -type] null
            
            assertEquals [json get $testJson 0.a -value] "hello world"
        } \
        -cleanup {
            unset testJson
        }

test "testGetType1" "" \
        -setup {
            set testJson [getTestJson1]
        } \
        -body {
            assertEquals [fpgaedu::json::GetType $testJson] object
            assertEquals [fpgaedu::json::GetType $testJson a] string
            assertEquals [fpgaedu::json::GetType $testJson b] number
            assertEquals [fpgaedu::json::GetType $testJson c] object
            assertEquals [fpgaedu::json::GetType $testJson c.d] boolean
            assertEquals [fpgaedu::json::GetType $testJson c.e] array
            assertEquals [fpgaedu::json::GetType $testJson c.e.0] string
            assertEquals [fpgaedu::json::GetType $testJson c.e.1] string
            assertEquals [fpgaedu::json::GetType $testJson c.e.2] object
            assertEquals [fpgaedu::json::GetType $testJson c.e.2.f] null
        } \
        -cleanup {
            unset testJson
        }


test "testGetValue1" "" \
        -setup {
            set testJson [getTestJson1]
        } \
        -body {
            assertEquals [fpgaedu::json::GetValue $testJson a] "hello world"
            assertEquals [fpgaedu::json::GetValue $testJson b] 1234
            assertEquals [fpgaedu::json::GetValue $testJson c.d] True
            assertEquals [fpgaedu::json::GetValue $testJson c.e.0] "index 0"
            assertEquals [fpgaedu::json::GetValue $testJson c.e.1] "index 1"
            assertEquals [fpgaedu::json::GetValue $testJson c.e.2.f] null
            # These should throw an error, since their keys point to structured
            # types.
            assertThrows { 
                fpgaedu::json::GetValue $testJson
            }
            assertThrows {             
                fpgaedu::json::GetValue $testJson c
            }
            assertThrows {             
                fpgaedu::json::GetValue $testJson c.e
            }
            assertThrows {             
                fpgaedu::json::GetValue $testJson c.e.2
            }
        } \
        -cleanup {
            unset testJson
        }

test "testGetJson1" "" \
        -setup {
            set testJson [getTestJson1]
        } \
        -body {
            set sub [fpgaedu::json::GetJson $testJson a]
            assertDictContains $sub data "hello world"
            assertDictContains $sub schema type string

            set sub [fpgaedu::json::GetJson $testJson b]
            assertDictContains $sub data 1234
            assertDictContains $sub schema type number

            set sub [fpgaedu::json::GetJson $testJson c]
            assertDictContains $sub data d True
            assertDictContains $sub data e 0 "index 0"
            assertDictContains $sub data e 1 "index 1"
            assertDictContains $sub data e 2 f null
            assertDictContains $sub schema type object
            assertDictContains $sub schema members d type boolean
            assertDictContains $sub schema members e type array
            assertDictContains $sub schema members e members 0 type string
            assertDictContains $sub schema members e members 1 type string
            assertDictContains $sub schema members e members 2 type object
            assertDictContains $sub schema members e members 2 members f type null

            set sub [fpgaedu::json::GetJson $testJson c.e]
            assertDictContains $sub data 0 "index 0"
            assertDictContains $sub data 1 "index 1"
            assertDictContains $sub data 2 f null
            assertDictContains $sub schema type array
            assertDictContains $sub schema members 0 type string
            assertDictContains $sub schema members 1 type string
            assertDictContains $sub schema members 2 type object
            assertDictContains $sub schema members 2 members f type null

        } \
        -cleanup {
            unset testJson
            unset sub
        }

test "testSet1" "" \
        -setup {
            set testJson {
                data {
                    a {
                        b 1234
                    }
                }
                schema {
                    type object
                    members {
                        a {
                            type object
                            members {
                                b { type number }
                            }
                        }
                    }
                }
            }
        } \
        -body {
            json set testJson c number 1
            assertDictContains $testJson data a b 1234
            assertDictContains $testJson data c 1
            assertDictContains $testJson schema members a members b type number
            assertDictContains $testJson schema members c type number

            json set testJson a string "hello world"
            assertDictContains $testJson data a "hello world"
            assertDictContains $testJson data c 1
            assertDictContains $testJson schema members a type string
            assertDictContains $testJson schema members c type number

            json set testJson d object
            assertDictContains $testJson data a "hello world"
            assertDictContains $testJson data c 1
            assertDictContains $testJson data d {}
            assertDictContains $testJson schema members a type string
            assertDictContains $testJson schema members c type number
            assertDictContains $testJson schema members d type object

            json set testJson d.x null 
            assertDictContains $testJson data a "hello world"
            assertDictContains $testJson data c 1
            assertDictContains $testJson data d x null
            assertDictContains $testJson schema members a type string
            assertDictContains $testJson schema members c type number
            assertDictContains $testJson schema members d type object
            assertDictContains $testJson schema members d members x type null
            
            json set testJson e array 
            json set testJson e.0 string "index 0"
            json set testJson e.1 string "index 1"
            assertDictContains $testJson data a "hello world"
            assertDictContains $testJson data c 1
            assertDictContains $testJson data d x null
            assertDictContains $testJson data e 0 "index 0"
            assertDictContains $testJson data e 1 "index 1"
            assertDictContains $testJson schema members a type string
            assertDictContains $testJson schema members c type number
            assertDictContains $testJson schema members d type object
            assertDictContains $testJson schema members d members x type null
            assertDictContains $testJson schema members e type array
            assertDictContains $testJson schema members e members 0 type string
            assertDictContains $testJson schema members e members 1 type string
        } \
        -cleanup {
            unset testJson
        }

test "testSet2" "" \
        -body {
            set parentJson [json create object]
            json set parentJson a number 1
            assertDictContains $parentJson data a 1
            assertDictContains $parentJson schema type object
            assertDictContains $parentJson schema members a type number

            set childJson [json create array]
            json set childJson 0 object
            json set childJson 0.x string "inner x"
            assertDictContains $childJson data 0 x "inner x"
            assertDictContains $childJson schema type array
            assertDictContains $childJson schema members 0 type object
            assertDictContains $childJson schema members 0 members x type string

            json set parentJson b json $childJson
            assertDictContains $parentJson data a 1
            assertDictContains $parentJson data b 0 x "inner x"
            assertDictContains $parentJson schema type object
            assertDictContains $parentJson schema members a type number
            assertDictContains $parentJson schema members b type array
            assertDictContains $parentJson schema members b members 0 type object
            assertDictContains $parentJson schema members b members 0 members x type string
        } \
        -cleanup {
            unset parentJson
            unset childJson
        }

test "testContains1" "" \
        -setup {
            set testJson [json create object]
            json set testJson a string "string value"
        } \
        -body {
            assertTrue [json contains $testJson -type object]
            assertFalse [json contains $testJson -type array]
            assertFalse [json contains $testJson -type number]
            
            assertTrue [json contains $testJson -key a]
            assertFalse [json contains $testJson -key b]
            
            assertTrue [json contains $testJson -key a -type string]
            assertTrue [json contains $testJson -key a -value "string value"]
            assertFalse [json contains $testJson -key a -value "other value"]

            assertTrue [json contains $testJson \
                    -key a \
                    -value "string value" \
                    -type string]
            assertFalse [json contains $testJson \
                    -key b \
                    -value "string value" \
                    -type string]
            assertFalse [json contains $testJson \
                    -key a \
                    -value "other value" \
                    -type string]
            assertFalse [json contains $testJson \
                    -key a \
                    -value "string value" \
                    -type object]
        } \
        -cleanup {
            unset testJson
        }

test "testParse1" "" \
        -body {
            set result [json parse {[1.23e-99, 0, 0]}]
            assertDictContains $result data 0 1.23e-99
            assertDictContains $result data 1 0
            assertDictContains $result data 2 0
            assertDictContains $result schema type array
            assertDictContains $result schema members 0 type number
            assertDictContains $result schema members 1 type number
            assertDictContains $result schema members 2 type number

            set result [json parse {[ 1.23e-99,    0,     0 ]}]
            assertDictContains $result data 0 1.23e-99
            assertDictContains $result data 1 0
            assertDictContains $result data 2 0
            assertDictContains $result schema type array
            assertDictContains $result schema members 0 type number
            assertDictContains $result schema members 1 type number
            assertDictContains $result schema members 2 type number
        } \
        -cleanup {
            unset result
        }

test "testParse2" "" \
        -body {
            set result [json parse {[1.23e-99, "a", [1,2,3]]}]
            assertTrue [json contains $result -type array]
            assertTrue [json contains $result -key 0 -type number -value 1.23e-99]
            assertTrue [json contains $result -key 1 -type string -value a]
            assertTrue [json contains $result -key 2 -type array]
            assertTrue [json contains $result -key 2.0 -type number -value 1]
            assertTrue [json contains $result -key 2.1 -type number -value 2]
            assertTrue [json contains $result -key 2.2 -type number -value 3]
        } \
        -cleanup {
            unset result
        }

test "testParse3" "" \
        -body {
            set result [json parse {["alpha", "beta", "gamma"]}]
            assertTrue [json contains $result -type array]
            assertTrue [json contains $result -key 0 -type string -value alpha]
            assertTrue [json contains $result -key 1 -type string -value beta]
            assertTrue [json contains $result -key 2 -type string -value gamma]
        } \
        -cleanup {
            unset result
        }

test "testParse4" "" \
        -body {
            set result [json parse {[]}]
            assertTrue [json contains $result -type array]
        
            set result [json parse {{}}]
            assertTrue [json contains $result -type object]
        } \
        -cleanup {
            unset result
        }

test "testParse5" "" \
        -body {
            set result [json parse {{"key": "value"}}]
            assertTrue [json contains $result -type object]
            assertTrue [json contains $result -key key -type string -value value]

            set result [json parse {{    "key"   :        "value"    }}]
            assertTrue [json contains $result -type object]
            assertTrue [json contains $result -key key -type string -value value]

            set result [json parse "\t{\t \"key\"\t:    \n\"value\"\n\r}"]
            assertTrue [json contains $result -type object]
            assertTrue [json contains $result -key key -type string -value value]
        } \
        -cleanup {
            unset result
        }

test "testParse6" "" \
        -body {
            set result [json parse {{"key": [1, 2, 3]}}]
            assertTrue [json contains -type object]
            assertTrue [json contains -key key -type array]
            assertTrue [json contains -key key.0 -type number -value 1]
            assertTrue [json contains -key key.1 -type number -value 2]
            assertTrue [json contains -key key.2 -type number -value 3]
        } \
        -cleanup {
            unset result
        }

test "testParse7" "" \
        -body {
            set result [json parse {{"k1": true, "k2": false, "k3": null}}]
            assertTrue [json contains -type object]
            assertTrue [json contains -key k1 -type boolean -value true]
            assertTrue [json contains -key k2 -type boolean -value false]
            assertTrue [json contains -key k3 -type null -value null]
        } \
        -cleanup {
            unset result
        }

test "testParse8" "" \
        -body {
            assertThrows {
                json parse x
            }
            assertThrows {
                json parse {{"hello" blah}}
            }
        }

test "testTokenize" "" \
        -body {
            # copied from 
            assertEquals [::fpgaedu::json::Tokenize {"a"}] \
                    [list [list STRING a]]
            assertEquals [::fpgaedu::json::Tokenize {"ab\nc\"de"}] \
                    [list [list STRING ab\nc\"de]]
            assertEquals [::fpgaedu::json::Tokenize {0}] \
                    [list [list NUMBER 0]]
            assertEquals [::fpgaedu::json::Tokenize {0.}] \
                    [list [list NUMBER 0.]]
            assertEquals [::fpgaedu::json::Tokenize {-0.1234567890}] \
                    [list [list NUMBER -0.1234567890]]
            assertEquals [::fpgaedu::json::Tokenize {-525}] \
                    [list [list NUMBER -525]]
            assertEquals [::fpgaedu::json::Tokenize {1E100}] \
                    [list [list NUMBER 1E100]]
            assertEquals [::fpgaedu::json::Tokenize {1.23e-99}] \
                    [list [list NUMBER 1.23e-99]]
            assertEquals [::fpgaedu::json::Tokenize {1.23e-99, 0, 0}] \
                    [list [list NUMBER 1.23e-99] COMMA \
                          [list NUMBER 0] COMMA \
                          [list NUMBER 0]]
            assertEquals [::fpgaedu::json::Tokenize true] \
                    [list [list RAW true]]
            assertEquals [::fpgaedu::json::Tokenize false] \
                    [list [list RAW false]]
            assertEquals [::fpgaedu::json::Tokenize null] \
                    [list [list RAW null]]
        }

test "testStringify1" "" \
        -setup {
            set testJson [json create object]
            json set testJson k string v
        } \
        -body {
            assertEquals [json stringify $testJson] {{"k": "v"}}
        } \
        -cleanup {
            unset testJson
        }

test "testStringify2" "" \
        -setup {
            set testJson [json create object]
            json set testJson a object
            json set testJson a.b string "hello world"
            json set testJson c boolean true
        } \
        -body {
            assertEquals [json stringify $testJson] \
                    {{"a": {"b": "hello world"}, "c": true}}
        } \
        -cleanup {
            unset testJson
        }

test "testStringify3" "" \
        -setup {
            set string1Json [json create string]
            set string2Json [json create string "hello fellow"]
            set number1Json [json create number 1]
            set number99Json [json create number 99]
            set booleanTrueJson [json create boolean true]
            set booleanFalseJson [json create boolean false]
            set nullJson [json create null]
        } \
        -body {
            assertEquals [json stringify $string1Json] {""}
            assertEquals [json stringify $string2Json] {"hello fellow"}
            assertEquals [json stringify $number1Json] 1
            assertEquals [json stringify $number99Json] 99
            assertEquals [json stringify $booleanTrueJson] true
            assertEquals [json stringify $booleanFalseJson] false
            assertEquals [json stringify $nullJson] null
        } \
        -cleanup {
            unset string1Json
            unset string2Json
            unset number1Json
            unset number99Json
            unset booleanTrueJson
            unset booleanFalseJson
            unset nullJson
        }

test "testStringify4" "" \
        -setup {
            set testJson [json create array]
            json set testJson 0 string "hello"
            json set testJson 1 string "world"
        } \
        -body {
            assertEquals [json stringify $testJson] \
                    {["hello", "world"]}
        } \
        -cleanup {
            unset testJson
        }

test "testStringify5" "" \
        -setup {
            set testJson [json create array]
            json set testJson 0 object
            json set testJson 0.a boolean true
            json set testJson 0.long_key string "test"
            json set testJson 1 null
        } \
        -body {
            assertEquals [json stringify $testJson] \
                    {[{"a": true, "long_key": "test"}, null]}
        } \
        -cleanup {
            unset testJson
        }

cleanupTests
